function [H_h] = h_Jacobian(s)
% This function calculates H_h, the Jacobian matrix of partial derivatives of f
% with respect to h for each time step.

% Copyright (c) 2016 by Robert Richardson, David Howey
% and The Chancellor, Masters and Scholars of the University of Oxford.
% See the licence file LICENCE.txt for more information.

persistent kt R T_inf a3 a2 a1
persistent firstRun

if isempty(firstRun)
    kt = s.kt;
    R = s.r_o;
    T_inf =  s.T_inf;
    a1 = s.a1;
    a2 = s.a2;
    a3 = s.a3; 
    firstRun = 1;
end

h = s.h;
Tbar = s.x(1);
gam = s.x(2);

% H_h =>d(Z)/d(h)
H_h = -(4*Tbar*a1*((24*R*Tbar*kt)/(24*kt + R*h)^2 -                 ...
    (R*T_inf)/(24*kt + R*h) + (R^2*T_inf*h)/(24*kt + R*h)^2 +       ...
    (30*R^2*gam*kt)/(48*kt + 2*R*h)^2) -                            ...
    4*a1*((24*Tbar*kt)/(24*kt + R*h) + (R*T_inf*h)/(24*kt + R*h) +  ...
    (15*R*gam*kt)/(48*kt + 2*R*h))*((24*R*Tbar*kt)/(24*kt + R*h)^2 -...
    (R*T_inf)/(24*kt + R*h) + (R^2*T_inf*h)/(24*kt + R*h)^2 +       ...
    (30*R^2*gam*kt)/(48*kt + 2*R*h)^2) +                            ...
    (15*R*gam*a1*((24*R*Tbar*kt)/(24*kt + R*h)^2 -                  ...
    (R*T_inf)/(24*kt + R*h) + (R^2*T_inf*h)/(24*kt + R*h)^2 +       ...
    (30*R^2*gam*kt)/(48*kt + 2*R*h)^2))/8)/                         ...
    (a3 + Tbar*a2 + 3*Tbar^2*a1 + 2*a1*((24*Tbar*kt)/(24*kt + R*h) +...
    (R*T_inf*h)/(24*kt + R*h) + (15*R*gam*kt)/(48*kt + 2*R*h))^2 +  ...
    (15*R^2*gam^2*a1)/32 - 4*Tbar*a1*((24*Tbar*kt)/(24*kt + R*h) +  ...
    (R*T_inf*h)/(24*kt + R*h) + (15*R*gam*kt)/(48*kt + 2*R*h)) +    ...
    (15*R*Tbar*gam*a1)/8 - (15*R*gam*a1*((24*Tbar*kt)/(24*kt + R*h)+...
    (R*T_inf*h)/(24*kt + R*h) + (15*R*gam*kt)/(48*kt + 2*R*h)))/8)^2;

end